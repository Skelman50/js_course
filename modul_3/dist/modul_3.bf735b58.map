{"version":3,"sources":["node_modules/input-core/lib/functions/defineMaskList.js","node_modules/input-core/lib/constants/charTypesEnum.js","node_modules/input-core/lib/functions/inputValue.js","node_modules/input-core/lib/functions/removeSelectedRange.js","node_modules/input-core/lib/inputCore.js","node_modules/subscribe-event/subscribe.js","node_modules/mask-input/lib/maskInput.js","index.js"],"names":["UIController","MaskInput","document","querySelector","mask","alwaysShowMask","maskChar","onChange","inputCard","value","match","name","btn","disabled","style","outlineColor","getElementById","divResult","table","getStr","JSON","parse","localStorage","getItem","key","tr","createElement","append","td1","innerText","toUpperCase","slice","td2","clear","id","addEventListener","remove","length","border","r","result","input","_visibleValue","split","join","fetch","then","res","lstrgSer","stringify","setItem"],"mappings":"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","file":"modul_3.bf735b58.map","sourceRoot":"..","sourcesContent":["'use strict';\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n    value: true\r\n});\r\nexports.default = defineMaskList;\r\n/**\r\n *\r\n * @param {String} mask\r\n * @param format\r\n * @returns {Array}\r\n */\r\nfunction defineMaskList(mask, format) {\r\n    if (!mask) {\r\n        return [];\r\n    }\r\n\r\n    var stack = [];\r\n    var escape = false;\r\n\r\n    for (var i = 0; i < mask.length; i++) {\r\n        var item = format[mask[i]];\r\n        if (escape && item) {\r\n            item = null;\r\n            escape = false;\r\n        }\r\n        if (!item) {\r\n            if (!escape && mask[i] === '\\\\') {\r\n                escape = true;\r\n                continue;\r\n            }\r\n            escape = false;\r\n            stack.push({\r\n                char: mask[i],\r\n                next: null\r\n            });\r\n        } else if (item.regexp) {\r\n            stack.push(item);\r\n        }\r\n    }\r\n\r\n    return stack;\r\n}","\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n    value: true\r\n});\r\nexports.default = {\r\n    USER: 1,\r\n    CHAR: 2,\r\n    MASK: 3\r\n};","'use strict';\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n    value: true\r\n});\r\nexports.default = inputValue;\r\n\r\nvar _charTypesEnum = require('../constants/charTypesEnum.js');\r\n\r\nvar _charTypesEnum2 = _interopRequireDefault(_charTypesEnum);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nfunction inputValue(_ref) {\r\n    var data = _ref.data,\r\n        _ref$input = _ref.input,\r\n        input = _ref$input === undefined ? '' : _ref$input,\r\n        selection = _ref.selection,\r\n        mask = _ref.mask,\r\n        maskChar = _ref.maskChar,\r\n        maskString = _ref.maskString;\r\n\r\n    var value = [];\r\n    var maskedValue = '';\r\n\r\n    var maskIndex = 0;\r\n    var valueIndex = 0;\r\n    var pastedIndex = 0;\r\n\r\n    var inputValuesApplied = 0;\r\n\r\n    while (mask[maskIndex]) {\r\n        var item = data.length > valueIndex ? data[valueIndex] : null;\r\n        var maskPart = mask[maskIndex];\r\n\r\n        var pastedValuesStack = null;\r\n        if (selection.start <= maskIndex && pastedIndex < input.length) {\r\n            pastedValuesStack = input.slice(pastedIndex);\r\n        }\r\n\r\n        // Обработка захардкоженных в маску символов. \r\n        if (maskPart.char) {\r\n            // Если есть вводимые пользователем значение, в первую очередь проверяем его.\r\n            // Но не проверяем по всему стеку.\r\n            if (pastedValuesStack && pastedValuesStack[0] === maskPart.char) {\r\n                pastedIndex++;\r\n            } else {\r\n                if (item && (item.char === maskPart.char || item.type !== _charTypesEnum2.default.USER) || input) {\r\n                    valueIndex++;\r\n                }\r\n            }\r\n\r\n            value.push({\r\n                char: maskPart.char,\r\n                type: _charTypesEnum2.default.CHAR\r\n            });\r\n\r\n            if (pastedValuesStack) {\r\n                inputValuesApplied++;\r\n            }\r\n\r\n            maskedValue += maskPart.char;\r\n        }\r\n\r\n        // Кастомный текст\r\n        if (maskPart.regexp) {\r\n            var part = null;\r\n\r\n            // Если есть вводимое пользователем значение, то проверям его. \r\n            // Причем пробегаемся по стеку вводимых значений, пока не найдем нужное\r\n            if (pastedValuesStack) {\r\n                var i = 0;\r\n                while (!maskPart.regexp.test(pastedValuesStack[i]) && pastedValuesStack.length > i) {\r\n                    i++;\r\n                    pastedIndex++;\r\n                }\r\n                if (pastedValuesStack.length > i) {\r\n                    pastedIndex++;\r\n                    inputValuesApplied++;\r\n\r\n                    // Игнорируем предыдущее значение в инпуте\r\n                    valueIndex++;\r\n\r\n                    part = pastedValuesStack[i];\r\n                    value.push({\r\n                        char: part,\r\n                        type: _charTypesEnum2.default.USER\r\n                    });\r\n                    maskedValue += part;\r\n                }\r\n            }\r\n\r\n            // В пользовательском вводе нет или невалидные данные. Пытаемся аплаить те данные, что были раньше или заменяем на плейсхолдер\r\n            if (!part) {\r\n                // Если произошел сдвиг, пропускаем лишнее значение\r\n                if (item && item.type === _charTypesEnum2.default.CHAR && data.length > valueIndex + 1) {\r\n                    valueIndex++;\r\n                    continue;\r\n                }\r\n                if (item && item.type === _charTypesEnum2.default.USER && maskPart.regexp.test(item.char)) {\r\n                    value.push({\r\n                        char: item.char,\r\n                        type: _charTypesEnum2.default.USER\r\n                    });\r\n                    maskedValue += item.char;\r\n                    valueIndex++;\r\n                } else {\r\n                    part = maskString ? maskString[maskIndex] : maskChar;\r\n\r\n                    value.push({\r\n                        char: part,\r\n                        type: _charTypesEnum2.default.MASK\r\n                    });\r\n\r\n                    if (data.length > maskIndex) {\r\n                        valueIndex++;\r\n                    }\r\n\r\n                    maskedValue += part;\r\n                }\r\n            }\r\n        }\r\n\r\n        maskIndex++;\r\n    }\r\n\r\n    var selectionPosition = selection.start + inputValuesApplied;\r\n\r\n    // Удаляем все ведующие maskChar\r\n    var bound = value.length - 1;\r\n    var charsCount = 0;\r\n    while (bound >= 0 && value[bound].type !== _charTypesEnum2.default.USER) {\r\n        if (value[bound].type === _charTypesEnum2.default.MASK) {\r\n            charsCount = 0;\r\n        }\r\n        if (value[bound].type === _charTypesEnum2.default.CHAR) {\r\n            charsCount++;\r\n        }\r\n        bound--;\r\n    }\r\n    bound += charsCount;\r\n\r\n    var visibleValue = '';\r\n    for (var _i = 0; _i <= bound; _i++) {\r\n        visibleValue += value[_i].char;\r\n    }\r\n\r\n    return {\r\n        value: value,\r\n        visibleValue: visibleValue,\r\n        maskedValue: maskedValue,\r\n        selection: {\r\n            start: selectionPosition,\r\n            end: selectionPosition\r\n        }\r\n    };\r\n}","'use strict';\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n    value: true\r\n});\r\nexports.default = removeSelectedRange;\r\n\r\nvar _charTypesEnum = require('../constants/charTypesEnum');\r\n\r\nvar _charTypesEnum2 = _interopRequireDefault(_charTypesEnum);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nfunction removeSelectedRange(_ref) {\r\n    var value = _ref.value,\r\n        selection = _ref.selection,\r\n        reformat = _ref.reformat,\r\n        mask = _ref.mask,\r\n        maskChar = _ref.maskChar,\r\n        maskString = _ref.maskString;\r\n\r\n    var copyMaskChar = function copyMaskChar(count) {\r\n        var res = [];\r\n        for (var i = 0; i < count; i++) {\r\n            res.push({\r\n                char: maskChar,\r\n                type: _charTypesEnum2.default.MASK\r\n            });\r\n        }\r\n        return res;\r\n    };\r\n\r\n    var pasteMaskSymbols = function pasteMaskSymbols() {\r\n        if (reformat) {\r\n            return '';\r\n        }\r\n\r\n        if (maskString) {\r\n            var res = [];\r\n            for (var i = selection.start; i < selection.end; i++) {\r\n                res.push({\r\n                    char: maskString[i],\r\n                    type: _charTypesEnum2.default.MASK\r\n                });\r\n            }\r\n            return res;\r\n        }\r\n\r\n        return copyMaskChar(selection.end - selection.start);\r\n    };\r\n\r\n    if (selection.end < selection.start) {\r\n        var tmp = selection.end;\r\n        selection.end = selection.start;\r\n        selection.start = tmp;\r\n    }\r\n\r\n    if (selection.start === selection.end) {\r\n        return value;\r\n    }\r\n\r\n    if (value.length > selection.start) {\r\n        return value.slice(0, selection.start).concat(pasteMaskSymbols(), value.slice(selection.end, value.length));\r\n    }\r\n\r\n    return value;\r\n}","'use strict';\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n    value: true\r\n});\r\nexports.createInput = exports.defaults = undefined;\r\n\r\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\r\n\r\nvar _defineMaskList = require('./functions/defineMaskList');\r\n\r\nvar _defineMaskList2 = _interopRequireDefault(_defineMaskList);\r\n\r\nvar _inputValue = require('./functions/inputValue');\r\n\r\nvar _inputValue2 = _interopRequireDefault(_inputValue);\r\n\r\nvar _removeSelectedRange = require('./functions/removeSelectedRange');\r\n\r\nvar _removeSelectedRange2 = _interopRequireDefault(_removeSelectedRange);\r\n\r\nvar _charTypesEnum = require('./constants/charTypesEnum');\r\n\r\nvar _charTypesEnum2 = _interopRequireDefault(_charTypesEnum);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\r\n\r\nvar InputCore = function () {\r\n    function InputCore(_ref) {\r\n        var value = _ref.value,\r\n            mask = _ref.mask,\r\n            reformat = _ref.reformat,\r\n            maskFormat = _ref.maskFormat,\r\n            maskChar = _ref.maskChar,\r\n            maskString = _ref.maskString;\r\n\r\n        _classCallCheck(this, InputCore);\r\n\r\n        if (maskString && maskString.length !== mask.length) {\r\n            throw new Error('maskString must have same length as mask');\r\n        }\r\n        if (maskChar.length > 1) {\r\n            throw new Error('maskChar must have only 1 char');\r\n        }\r\n        this._maskString = maskString;\r\n        this._maskChar = maskChar;\r\n        this._reformat = reformat;\r\n        this.selection = { start: 0, end: 0 };\r\n\r\n        this.setMaskFormat(maskFormat);\r\n        this._mask = (0, _defineMaskList2.default)(mask, this._maskFormat);\r\n\r\n        this.setValue(value);\r\n    }\r\n\r\n    /**\r\n     * Заполняет _maskFormat, который является объектом byId объектов\r\n     * @param {Array} maskFormat     \r\n     */\r\n\r\n\r\n    _createClass(InputCore, [{\r\n        key: 'setMaskFormat',\r\n        value: function setMaskFormat(maskFormat) {\r\n            this._maskFormat = maskFormat.reduce(function (store, item) {\r\n                store[item.str] = item;\r\n                return store;\r\n            }, {});\r\n        }\r\n    }, {\r\n        key: 'input',\r\n        value: function input(_input) {\r\n            var _value = this._value;\r\n\r\n            var result = void 0;\r\n\r\n            if (this._reformat) {\r\n                result = this._reformat({\r\n                    data: _value,\r\n                    input: _input,\r\n                    selection: this.selection\r\n                });\r\n            } else {\r\n\r\n                _value = (0, _removeSelectedRange2.default)({\r\n                    value: _value,\r\n                    selection: this.selection,\r\n                    mask: this._mask,\r\n                    maskChar: this._maskChar,\r\n                    maskString: this._maskString\r\n                });\r\n                this.selection.end = this.selection.start;\r\n\r\n                result = (0, _inputValue2.default)({\r\n                    data: _value,\r\n                    input: _input,\r\n                    selection: this.selection,\r\n                    mask: this._mask,\r\n                    maskChar: this._maskChar,\r\n                    maskString: this._maskString\r\n                });\r\n            }\r\n\r\n            this._value = result.value;\r\n            this._maskedValue = result.maskedValue;\r\n            this._visibleValue = result.visibleValue;\r\n            this.setSelection(result.selection);\r\n        }\r\n    }, {\r\n        key: 'setSelection',\r\n        value: function setSelection(_ref2) {\r\n            var start = _ref2.start,\r\n                end = _ref2.end;\r\n\r\n            this.selection = {\r\n                start: start,\r\n                end: end\r\n            };\r\n        }\r\n    }, {\r\n        key: 'getSelection',\r\n        value: function getSelection() {\r\n            return {\r\n                start: this.selection.start,\r\n                end: this.selection.end\r\n            };\r\n        }\r\n    }, {\r\n        key: 'backspace',\r\n        value: function backspace() {\r\n            this.removePreviosOrSelected();\r\n        }\r\n    }, {\r\n        key: 'paste',\r\n        value: function paste(value) {\r\n            this.input(value);\r\n        }\r\n\r\n        /**\r\n         * Определяет циклический список, в котором учтены циклы маски, по которой будет проходить итерации.\r\n         * @param {String} mask\r\n         * @returns {{head: {}, hasCycle: boolean}}\r\n         */\r\n\r\n    }, {\r\n        key: 'setMask',\r\n        value: function setMask(mask) {\r\n\r\n            this._mask = (0, _defineMaskList2.default)(mask, this._maskFormat);\r\n\r\n            this.setValue(this._value);\r\n        }\r\n    }, {\r\n        key: 'getState',\r\n        value: function getState() {\r\n            return {\r\n                value: this.getValue(),\r\n                maskedValue: this.getMaskedValue(),\r\n                visibleValue: this.getVisibleValue(),\r\n                selection: this.getSelection()\r\n            };\r\n        }\r\n    }, {\r\n        key: 'getValue',\r\n        value: function getValue() {\r\n            return this._value;\r\n        }\r\n    }, {\r\n        key: 'setReformat',\r\n        value: function setReformat(reformat) {\r\n            this._reformat = reformat;\r\n            this.setValue(this._value);\r\n        }\r\n    }, {\r\n        key: 'getMaskedValue',\r\n        value: function getMaskedValue() {\r\n            return this._maskedValue;\r\n        }\r\n    }, {\r\n        key: 'getVisibleValue',\r\n        value: function getVisibleValue() {\r\n            return this._visibleValue;\r\n        }\r\n    }, {\r\n        key: 'setMaskChar',\r\n        value: function setMaskChar(maskChar) {\r\n            if (maskChar.length > 1) {\r\n                throw new Error('maskChar must have only 1 char');\r\n            }\r\n\r\n            this._maskChar = maskChar;\r\n\r\n            this.setValue(this._value);\r\n        }\r\n    }, {\r\n        key: 'setMaskString',\r\n        value: function setMaskString(maskString) {\r\n            if (maskString && maskString.length !== this._mask.length) {\r\n                throw new Error('maskString must have same length as mask');\r\n            }\r\n\r\n            this._maskString = maskString;\r\n\r\n            this.setValue(this._value);\r\n        }\r\n    }, {\r\n        key: 'removePreviosOrSelected',\r\n        value: function removePreviosOrSelected() {\r\n            if (this.selection.start === this.selection.end) {\r\n                this.selection.start = this.selection.end - 1;\r\n                if (this.selection.start < 0) {\r\n                    this.selection.start = 0;\r\n                }\r\n            }\r\n\r\n            this.input('');\r\n        }\r\n    }, {\r\n        key: 'removeNextOrSelected',\r\n        value: function removeNextOrSelected() {\r\n            if (this.selection.start === this.selection.end) {\r\n                this.selection.end++;\r\n            }\r\n\r\n            this.input('');\r\n        }\r\n    }, {\r\n        key: 'setValue',\r\n        value: function setValue(data) {\r\n            var result = void 0;\r\n\r\n            if (this._reformat) {\r\n                result = this._reformat({\r\n                    data: data,\r\n                    selection: this.selection\r\n                });\r\n            } else {\r\n                var dataList = data;\r\n                if (!Array.isArray(dataList)) {\r\n                    dataList = [];\r\n                    for (var i = 0; i < data.length; i++) {\r\n                        dataList.push({\r\n                            char: data[i],\r\n                            type: _charTypesEnum2.default.USER\r\n                        });\r\n                    }\r\n                }\r\n                result = (0, _inputValue2.default)({\r\n                    data: dataList,\r\n                    selection: this.selection,\r\n                    mask: this._mask,\r\n                    maskChar: this._maskChar,\r\n                    maskString: this._maskString\r\n                });\r\n            }\r\n\r\n            this._value = result.value;\r\n            this._maskedValue = result.maskedValue;\r\n            this._visibleValue = result.visibleValue;\r\n            this.setSelection(result.selection);\r\n        }\r\n    }]);\r\n\r\n    return InputCore;\r\n}();\r\n\r\nvar defaults = exports.defaults = {\r\n    maskFormat: [{\r\n        str: '0',\r\n        regexp: /[0-9]/\r\n    }, {\r\n        str: '*',\r\n        regexp: /./\r\n    }, {\r\n        str: 'a',\r\n        regexp: /[a-zA-Z]/\r\n    }],\r\n    maskChar: '',\r\n    showMask: false,\r\n    removeSelectedRange: _removeSelectedRange2.default\r\n};\r\n\r\nvar createInput = exports.createInput = function createInput(_ref3) {\r\n    var value = _ref3.value,\r\n        maskString = _ref3.maskString,\r\n        mask = _ref3.mask,\r\n        reformat = _ref3.reformat,\r\n        _ref3$maskFormat = _ref3.maskFormat,\r\n        maskFormat = _ref3$maskFormat === undefined ? defaults.maskFormat : _ref3$maskFormat,\r\n        _ref3$maskChar = _ref3.maskChar,\r\n        maskChar = _ref3$maskChar === undefined ? defaults.maskChar : _ref3$maskChar;\r\n\r\n    var _reformat = reformat;\r\n    var _mask = mask;\r\n    if (!_reformat && !_mask) {\r\n        _reformat = function _reformat(value) {\r\n            return value;\r\n        };\r\n    } else if (_reformat) {\r\n        _mask = null;\r\n    }\r\n\r\n    return new InputCore({ value: value, mask: _mask, reformat: _reformat, maskFormat: maskFormat, maskChar: maskChar, maskString: maskString });\r\n};","!(function() {\r\n  \"use strict\";\r\n\r\n  // Basic subscribe function both browser events or node.js events\r\n  function subscribe(element, event, handler, options) {\r\n    var unsubscribeFunctionName = \"removeEventListener\";\r\n    var unsubscribe = function() {\r\n      element[unsubscribeFunctionName](event, handler);\r\n    };\r\n\r\n    if (element.addEventListener) {\r\n      element.addEventListener(event, handler, options);\r\n      return unsubscribe;\r\n    }\r\n\r\n    if (element.attachEvent) {\r\n      event = \"on\" + event;\r\n      element.attachEvent(event, handler);\r\n      unsubscribeFunctionName = \"detachEvent\";\r\n      return unsubscribe;\r\n    }\r\n\r\n    if (element.on) {\r\n      element.on(event, handler);\r\n      unsubscribeFunctionName = \"off\";\r\n      return unsubscribe;\r\n    }\r\n  }\r\n\r\n  // define your own subscribe functions\r\n  subscribe.define = function(addSubscription, removeSubscription) {\r\n    return function(element, event, handler, options) {\r\n      var unsubscribe = function() {\r\n        element[removeSubscription](event, handler);\r\n      };\r\n\r\n      element[addSubscription](event, handler, options);\r\n      return unsubscribe;\r\n    };\r\n  };\r\n\r\n  // umd\r\n  if (typeof exports === \"object\") {\r\n    // CommonJS\r\n    module.exports = subscribe;\r\n  } else if (typeof define === \"function\" && define.amd) {\r\n    // AMD. anonymous module\r\n    define(subscribe);\r\n  } else {\r\n    // Global scope\r\n    global.subscribeEvent = subscribe;\r\n  }\r\n})();\r\n","'use strict';\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\n\r\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\r\n\r\nvar _inputCore = require('input-core');\r\n\r\nvar _subscribeEvent = require('subscribe-event');\r\n\r\nvar _subscribeEvent2 = _interopRequireDefault(_subscribeEvent);\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\r\n\r\nvar KEYBOARD = {\r\n  BACKSPACE: 8,\r\n  DELETE: 46\r\n};\r\n/**\r\n * Adapter of react-maskInput to vanilaJs\r\n */\r\n\r\nvar MaskInput = function () {\r\n  function MaskInput(element, _ref) {\r\n    var _this = this;\r\n\r\n    var _ref$mask = _ref.mask,\r\n        mask = _ref$mask === undefined ? _inputCore.defaults.mask : _ref$mask,\r\n        _ref$value = _ref.value,\r\n        value = _ref$value === undefined ? '' : _ref$value,\r\n        reformat = _ref.reformat,\r\n        maskString = _ref.maskString,\r\n        _ref$maskChar = _ref.maskChar,\r\n        maskChar = _ref$maskChar === undefined ? _inputCore.defaults.maskChar : _ref$maskChar,\r\n        _ref$maskFormat = _ref.maskFormat,\r\n        maskFormat = _ref$maskFormat === undefined ? _inputCore.defaults.maskFormat : _ref$maskFormat,\r\n        showMask = _ref.showMask,\r\n        alwaysShowMask = _ref.alwaysShowMask,\r\n        onChange = _ref.onChange;\r\n\r\n    _classCallCheck(this, MaskInput);\r\n\r\n    this.showValue = function () {\r\n      if (_this.showMask && (_this.canSetSelection || _this.props.alwaysShowMask)) {\r\n        _this.element.value = _this.input.getMaskedValue();\r\n        return;\r\n      }\r\n      _this.element.value = _this.input.getVisibleValue();\r\n    };\r\n\r\n    this.setSelection = function () {\r\n      if (!_this.canSetSelection) {\r\n        return;\r\n      }\r\n      var selection = _this.input.getSelection();\r\n      _this.element.setSelectionRange(selection.start, selection.end);\r\n\r\n      var raf = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function (fn) {\r\n        return setTimeout(fn, 0);\r\n      };\r\n      // For android\r\n      raf(function () {\r\n        return _this.element.setSelectionRange(selection.start, selection.end);\r\n      });\r\n    };\r\n\r\n    this.onPaste = function (e) {\r\n      e.preventDefault();\r\n      _this.getSelection();\r\n\r\n      // getData value needed for IE also works in FF & Chrome\r\n      _this.input.paste(e.clipboardData.getData('Text'));\r\n\r\n      _this.showValue();\r\n\r\n      // Timeout needed for IE\r\n      setTimeout(_this.setSelection, 0);\r\n\r\n      _this.props.onChange && _this.props.onChange(e);\r\n    };\r\n\r\n    this.onChange = function (e) {\r\n      var currentValue = void 0;\r\n      if (_this.showMask && (_this.canSetSelection || _this.props.alwaysShowMask)) {\r\n        currentValue = _this.input.getMaskedValue();\r\n      } else {\r\n        currentValue = _this.input.getVisibleValue();\r\n      }\r\n\r\n      // fix conflict by update value in mask model\r\n      if (e.target.value !== currentValue) {\r\n        _this.getSelection();\r\n        _this.input.setValue(e.target.value);\r\n\r\n        _this.showValue();\r\n\r\n        setTimeout(_this.setSelection, 0);\r\n      }\r\n      _this.props.onChange && _this.props.onChange(e);\r\n    };\r\n\r\n    this.onKeyPress = function (e) {\r\n      if (e.metaKey || e.altKey || e.ctrlKey || e.key === 'Enter') {\r\n        return;\r\n      }\r\n\r\n      e.preventDefault();\r\n      _this.getSelection();\r\n      _this.input.input(e.key || e.data || String.fromCharCode(e.which));\r\n      _this.showValue();\r\n      _this.setSelection();\r\n      _this.props.onChange && _this.props.onChange(e);\r\n    };\r\n\r\n    this.onKeyDown = function (e) {\r\n      if (e.which === KEYBOARD.BACKSPACE) {\r\n        e.preventDefault();\r\n        _this.getSelection();\r\n        _this.input.removePreviosOrSelected();\r\n\r\n        _this.showValue();\r\n        _this.setSelection();\r\n\r\n        _this.props.onChange && _this.props.onChange(e);\r\n      }\r\n\r\n      if (e.which === KEYBOARD.DELETE) {\r\n        e.preventDefault();\r\n        _this.getSelection();\r\n        _this.input.removeNextOrSelected();\r\n\r\n        _this.showValue();\r\n        _this.setSelection();\r\n\r\n        _this.props.onChange && _this.props.onChange(e);\r\n      }\r\n    };\r\n\r\n    this.onFocus = function () {\r\n      _this.canSetSelection = true;\r\n    };\r\n\r\n    this.onBlur = function () {\r\n      _this.canSetSelection = false;\r\n    };\r\n\r\n    this.input = this.input = (0, _inputCore.createInput)({\r\n      value: value,\r\n      reformat: reformat,\r\n      maskString: maskString,\r\n      maskChar: maskChar,\r\n      mask: mask,\r\n      maskFormat: maskFormat\r\n    });\r\n\r\n    this.props = {\r\n      mask: mask,\r\n      value: value,\r\n      reformat: reformat,\r\n      maskChar: maskChar,\r\n      maskFormat: maskFormat,\r\n      maskString: maskString,\r\n      showMask: showMask,\r\n      alwaysShowMask: alwaysShowMask,\r\n      onChange: onChange\r\n    };\r\n\r\n    this.showMask = alwaysShowMask || showMask;\r\n\r\n    this.element = element;\r\n    this.showValue();\r\n    this.subscribe();\r\n  }\r\n\r\n  _createClass(MaskInput, [{\r\n    key: 'getSelection',\r\n    value: function getSelection() {\r\n      this.input.setSelection({\r\n        start: this.element.selectionStart,\r\n        end: this.element.selectionEnd\r\n      });\r\n    }\r\n  }, {\r\n    key: 'subscribe',\r\n    value: function subscribe() {\r\n      this.unsubscribe = {\r\n        onPaste: (0, _subscribeEvent2.default)(this.element, 'paste', this.onPaste),\r\n        onKeyDown: (0, _subscribeEvent2.default)(this.element, 'keydown', this.onKeyDown),\r\n        onKeyPress: (0, _subscribeEvent2.default)(this.element, this.keyPressPropName(), this.onKeyPress),\r\n        onChange: (0, _subscribeEvent2.default)(this.element, 'change', this.onChange),\r\n        onFocus: (0, _subscribeEvent2.default)(this.element, 'focus', this.onFocus),\r\n        onBlur: (0, _subscribeEvent2.default)(this.element, 'blur', this.onBlur)\r\n      };\r\n    }\r\n  }, {\r\n    key: 'keyPressPropName',\r\n    value: function keyPressPropName() {\r\n      if (typeof navigator !== 'undefined' && navigator.userAgent.match(/Android/i)) {\r\n        return 'beforeinput';\r\n      }\r\n      return 'keypress';\r\n    }\r\n  }, {\r\n    key: 'setProps',\r\n    value: function setProps(_ref2) {\r\n      var mask = _ref2.mask,\r\n          value = _ref2.value,\r\n          reformat = _ref2.reformat,\r\n          maskString = _ref2.maskString,\r\n          maskChar = _ref2.maskChar,\r\n          maskFormat = _ref2.maskFormat,\r\n          showMask = _ref2.showMask,\r\n          alwaysShowMask = _ref2.alwaysShowMask,\r\n          onChange = _ref2.onChange;\r\n\r\n      var updated = false;\r\n\r\n      if (this.props.onChange !== onChange) {\r\n        this.props.onChange = onChange;\r\n      }\r\n\r\n      if (this.props.alwaysShowMask !== alwaysShowMask || this.props.showMask !== showMask) {\r\n        this.showMask = alwaysShowMask || showMask;\r\n\r\n        this.props.alwaysShowMask = alwaysShowMask;\r\n        this.props.showMask = showMask;\r\n\r\n        updated = true;\r\n      }\r\n\r\n      if (maskFormat && maskFormat !== this.props.maskFormat) {\r\n        this.input.setMaskFormat(maskFormat);\r\n\r\n        this.props.maskFormat = maskFormat;\r\n\r\n        updated = true;\r\n      }\r\n\r\n      if (mask !== this.props.mask) {\r\n        this.input.setMask(mask);\r\n\r\n        this.props.mask = mask;\r\n\r\n        updated = true;\r\n      }\r\n\r\n      if (maskString !== this.props.maskString) {\r\n        this.input.setMaskString(maskString);\r\n\r\n        this.props.maskString = maskString;\r\n\r\n        updated = true;\r\n      }\r\n\r\n      if (maskChar !== this.props.maskChar) {\r\n        this.input.setMaskChar(maskChar);\r\n\r\n        this.props.maskChar = maskChar;\r\n\r\n        updated = true;\r\n      }\r\n\r\n      if (reformat !== this.props.reformat) {\r\n        this.input.setReformat(reformat);\r\n\r\n        this.props.reformat = reformat;\r\n\r\n        updated = true;\r\n      }\r\n\r\n      if (value !== this.props.value) {\r\n        this.input.setValue(value);\r\n\r\n        this.props.value = value;\r\n\r\n        updated = true;\r\n      }\r\n\r\n      if (updated) {\r\n        this.showValue();\r\n        this.setSelection();\r\n      }\r\n    }\r\n  }, {\r\n    key: 'destroy',\r\n    value: function destroy() {\r\n      this.unsubscribe.onPaste();\r\n      this.unsubscribe.onKeyDown();\r\n      this.unsubscribe.onKeyPress();\r\n      this.unsubscribe.onChange();\r\n      this.unsubscribe.onFocus();\r\n      this.unsubscribe.onBlur();\r\n    }\r\n  }]);\r\n\r\n  return MaskInput;\r\n}();\r\n\r\nexports.default = MaskInput;","'use strict';\r\n\r\nimport MaskInput from 'mask-input';\r\n\r\n \r\nconst UIController = new MaskInput (document.querySelector('.js-input-selector'), {\r\n  mask: '0000-0000-0000-0000',\r\n  alwaysShowMask: true,\r\n  maskChar: '_',\r\n  onChange() {\r\n \r\n  \tif (inputCard.value.match(/^(\\d{4}-){3}\\d{4}/) && name.value>1) {\r\n  \t\tbtn.disabled = false;\r\n  \t}else{\r\n  \t\t  btn.disabled = true;\r\n  \t}\r\n  \t\r\n        if (inputCard.value.match(/^(\\d{4}-){3}\\d{4}/)) {\r\n            inputCard.style.outlineColor = \"green\";\r\n   \r\n        } else {\r\n       \r\n            inputCard.style.outlineColor = \"red\";\r\n          \r\n        }\r\n\r\n  }\r\n});\r\n\r\n\r\n\r\nconst name = document.getElementById('name')\r\nconst btn = document.getElementById('btn')\r\nbtn.disabled = true;\r\nconst inputCard = document.getElementById('place');\r\nlet divResult = document.getElementById('result');\r\nlet table = document.getElementById('table');\r\n\r\nlet getStr = JSON.parse(localStorage.getItem(\"table\"));\r\n\r\n\tfor (let key in getStr) {\r\n\t\t\tlet tr = document.createElement('tr')\r\n\t\t\ttable.append(tr)\r\n\t\t\tlet td1 = document.createElement('td')\r\n\t\t\ttr.append(td1)\r\n\t\t\ttd1.innerText = key[0].toUpperCase() + key.slice(1);\r\n\t\t\tlet td2 = document.createElement('td')\r\n\t\t\ttr.append(td2)\r\n\t\t\ttd2.innerText = getStr[key];\r\n\t\t\tif (getStr[key]===\"\") {\r\n\t\t\t\ttd2.innerText = \"Unknown\"\r\n\t\t\t}\r\n\t\t}\r\n\tif (localStorage.getItem(\"table\")) {\r\n\t\tlet clear = document.createElement('button')\r\n\t\tclear.innerText = 'очистить'\r\n\t\tclear.id = \"clear\"\r\n\t\tdivResult.append(clear)\r\n\t\tclear.addEventListener('click',function(){\r\n\t\t\ttable.innerText = \"\";\r\n\t\t\tclear.remove()\r\n\t\t\tlocalStorage.clear()\r\n\t\t})\r\n\t}\r\n\r\nname.addEventListener('input', function(){\r\nif (name.value.length > 1 && inputCard.value.match(/^(\\d{4}-){3}\\d{4}/)) {\r\n\tname.style.border = \"1px solid grey\";\r\n\t\tname.style.outlineColor = \"green\";\r\n\t\tbtn.disabled = false;\r\n\t\t\r\n}else{\r\n\t\tname.style.border = \"1px solid red\";\r\n\t\tname.style.outlineColor = \"red\";\r\n\t\tbtn.disabled = true;\r\n\t}\r\n\r\n})\r\n\r\nbtn.addEventListener('click', function(){\r\n\tlet r = document.getElementById('clear')\r\n\tif (r!=null) {r.remove()}\r\n\t\r\n\tlet result = UIController.input._visibleValue.split('-').join('')\r\n\ttable.innerText = 'LOADING...'\r\n\tfetch (`https://api.bincodes.com/cc/?format=json&api_key=d96ca493f5be297f8c304a87edcdf6a8&cc=${result}`)\r\n\t.then(res=> res = {\r\n \"bin\": \"515735\",\r\n \"bank\": \"CITIBANK N.A.\",\r\n \"card\": \"MASTERCARD\",\r\n \"type\": \"CREDIT\",\r\n \"level\": \"WORLD\",\r\n \"country\": \"UNITED STATES\",\r\n \"countrycode\": \"US\",\r\n \"website\": \"\",\r\n \"phone\": \"\",\r\n \"valid\": \"true\"\r\n}\r\n)\r\n\t//.then(res => res.json())\r\n\t.then(res => {\r\n\t\tlet lstrgSer = JSON.stringify(res)\r\n\t\tlocalStorage.setItem(\"table\", lstrgSer)\r\n\t\ttable.innerText = \"\";\r\n\t\tfor (let key in res) {\r\n\t\t\tlet tr = document.createElement('tr')\r\n\t\t\ttable.append(tr)\r\n\t\t\tlet td1 = document.createElement('td')\r\n\t\t\ttr.append(td1)\r\n\t\t\ttd1.innerText = key[0].toUpperCase() + key.slice(1);\r\n\t\t\tlet td2 = document.createElement('td')\r\n\t\t\ttr.append(td2)\r\n\t\t\ttd2.innerText = res[key];\r\n\t\t\tif (res[key]===\"\") {\r\n\t\t\t\ttd2.innerText = \"Unknown\"\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t\r\n\t\tlet clear = document.createElement('button')\r\n\r\n\t\tclear.innerText = 'очистить'\r\n\t\tclear.id = \"clear\"\r\n\t\tdivResult.append(clear)\r\n\t\tclear.addEventListener('click',function(){\r\n\t\t\ttable.innerText = \"\";\r\n\t\t\tclear.remove()\r\n\t\t\tlocalStorage.clear()\r\n\t\t})\r\n\r\n\t\t\r\n\t\tbtn.disabled = false;\r\n\t\tname.disabled = false;\r\n\t\tinputCard.disabled = false;\r\n\t})\r\n\r\n})\r\n\r\n\r\n\r\n\r\n\r\n"]}